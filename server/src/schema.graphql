type Query {
  approvals: [Approval]
  userapprovals(oid: String!, uid: String!, status: String): [Approval]
  approval(id: String!): Approval

  devices: [Device]
  device(id: String!): Device

  connections: [Connection]
  connection(id: String!): Connection

  groups: [Group]
  group(id: String!): Group

  organizations: [Organization]
  organization(id: String!): Organization

  organization_user_approvals(oid: String! , uid: String!): [OrganizationUserApproval]
  organization_user_approval(oid: String! , uid: String!, id: String!): OrganizationUserApproval

  notifications(platform: String!): [Notification]
  notification(platform: String! , id: String!): Notification
}

type Mutation {
  createApproval(input: ApprovalCreateInput!): Approval
  updateApproval(input: ApprovalInput): Approval
  deleteApproval(input: ApprovalDeleteInput): Approval

  createDevice(input: DeviceCreateInput!): Device
  updateDevice(input: DeviceInput): Device
  deleteDevice(input: DeviceDeleteInput): Device

  createConnection(input: ConnectionCreateInput!): Connection
  updateConnection(input: ConnectionInput): Connection
  deleteConnection(input: ConnectionDeleteInput): Connection

  createGroup(input: GroupCreateInput!): Group
  updateGroup(input: GroupInput): Group
  deleteGroup(input: GroupDeleteInput): Group

  createOrganization(input: OrganizationCreateInput!): Organization
  updateOrganization(input: OrganizationInput): Organization
  deleteOrganization(input: OrganizationDeleteInput): Organization

  createOrganizationUserApproval(input: OrganizationUserApprovalCreateInput!): OrganizationUserApproval
  updateOrganizationUserApproval(input: OrganizationUserApprovalInput): OrganizationUserApproval
  deleteOrganizationUserApporval(input: OrganizationUserApprovalDeleteInput): OrganizationUserApproval

  createNotification(input: NotificationInput!): Notification
  updateNotification(input: NotificationInput): Notification
  deleteNotification(input: NotificationDeleteInput): Notification

}

type Settings {
  opt_in: Boolean
  timezone: String
}

type Publish {
  settings: Settings
  status: String
  updated_at: String
}

input ApprovalCreateInput {
  category: String
  connection_id: String 
  content: String
  created_at: String
  created_by: String
  edited_by: String
  image: String
  oid: String
  original_content: String
  source: String
  status: String
  uid: String
  updated_at: String
  updated_by: String
}

input ApprovalInput {
  id: String
  category: String
  connection_id: String
  content: String
  created_at: String
  created_by: String
  edited_by: String
  image: String
  oid: String
  original_content: String
  source: String
  status: String
  uid: String
  updated_at: String
  updated_by: String
}


input OrganizationUserApprovalCreateInput {
  uid: String!
  oid: String!
  created_at: String
  created_by: String
  source: String!
  status: String!
}

input OrganizationUserApprovalInput {
  id: String!
  uid: String!
  oid: String!
  created_at: String
  created_by: String
  source: String
  status: String
}
input OrganizationUserApprovalDeleteInput {
  oid: String!
  uid: String!
  id: String!
}


type OrganizationUserApproval {
  uid: String
  oid: String
  created_at: String
  created_by: String
  source: String
  status: String
}


input ApprovalDeleteInput {
  id: String!
}

type Approval {
  id: String!
  category: String
  connection_id: String
  content: String
  created_at: String
  created_by: String
  edited_by: String
  image: String
  oid: String
  original_content: String
  publish: Publish
  publish_at: String
  publish_at_str: String
  publish_date: String
  publish_status: String
  source: String
  status: String
  uid: String
  updated_at: String
  updated_by: String
}

type auth {
  firebase_id : String
  provider : String
  access_token: String
  created_at:  String
  expires: String
  expires_in: String
}

type ProfileRaw {
  emailAddress: String
  firstName: String
  headline: String
  id: String
  lastName: String
  pictureUrl: String
  publicProfileUrl: String
}

type Profile {
  avatar: String
  bio: String
  email: String
  firstname: String
  id: String
  lastname: String
  name: String
  raw: ProfileRaw
  url: String
}

type Time {
  daypart: String
  hour: String
  minute: String
}

type Default_Schedules {
  opt_in: Boolean
  timezone: String
  posting_times: [Time]
}

type Schedules {
  default: Default_Schedules
}

type ConnectionPubishSettings {
  schedules: Schedules
}

type ConnectionPublish {
  settings: ConnectionPubishSettings
}

type Connection {
  id: String!
  auth: auth
  created_at: String
  created_by: String
  ignore: Boolean
  name: String
  oid: String
  profile: Profile
  publish: ConnectionPublish
  source: String
  source_type: String
  status: String
  type: String
  uid: String
  version: String
}

input DeviceCreateInput {
  endpointId: String
}

input DeviceInput {
  id: String
  endpointId: String
}

input DeviceDeleteInput {
  id: String!
}

type Device {
  id: String!
  endpointId: String
}

input GroupInput {
  id: String!
  created_at: String
  created_by: String
  description: String
  members: String
  name: String
  oid: String
  updated_at: String
  updated_by: String
}

input GroupCreateInput {
  created_at: String
  created_by: String
  description: String
  members: String
  name: String
  oid: String
  updated_at: String
  updated_by: String
}

input GroupDeleteInput {
  id: String!
}

type Group {
  id: String!
  created_at: String
  created_by: String
  description: String
  members: String
  name: String
  oid: String
  updated_at: String
  updated_by: String
}

input OrgProfileInput {
  about: String
  name: String
}

input OrganizationInput {
  id: String!
  created_at: String
  members: String
  profile: OrgProfileInput
  slug: String
  streams: String
}

input OrganizationCreateInput {
  created_at: String
  members: String
  profile: OrgProfileInput
  slug: String
  streams: String
}

input OrganizationDeleteInput {
  id: String!
}

type OrgProfile {
  about: String
  name: String
}

type Organization {
  id: String!
  created_at: String
  members: String
  profile: OrgProfile
  slug: String
  streams: String
}

input auth_input {
  firebase_id: String
  provider: String
  access_token: String
  created_at:  String
  expires: String
  expires_in: String
}

input ProfileRawInput {
  emailAddress: String
  firstName: String
  headline: String
  id: String
  lastName: String
  pictureUrl: String
  publicProfileUrl: String
}

input Profile_input {
  avatar: String
  bio: String
  email: String
  firstname: String
  id: String
  lastname: String
  name: String
  raw: ProfileRawInput
  url: String
}

input TimeInput {
  daypart: String
  hour: String
  minute: String
}

input Default_SchedulesInput {
  opt_in: Boolean
  timezone: String
  posting_times: [TimeInput]
}

input SchedulesInput {
  default: Default_SchedulesInput
}

input ConnectionPubishSettingsInput {
  schedules: SchedulesInput
}

input ConnectionPublishInput {
  settings: ConnectionPubishSettingsInput
}

input ConnectionCreateInput {
  auth: auth_input
  created_at: String
  created_by: String
  ignore: Boolean
  name: String
  oid: String
  profile: Profile_input
  publish: ConnectionPublishInput
  source: String
  source_type: String
  status: String
  type: String
  uid: String
  version: String
}

input ConnectionInput {
  id: String
  auth: auth_input
  created_at: String
  created_by: String
  ignore: Boolean
  name: String
  oid: String
  profile: Profile_input
  publish: ConnectionPublishInput
  source: String
  source_type: String
  status: String
  type: String
  uid: String
  version: String
}

input ConnectionDeleteInput {
  id: String!
}


type DeviceNotif {
  available : Boolean
  cordova : String
  isVirtual : Boolean
  manufacturer : String
  model :String
  platform :String
  serial : String
  uuid : String
  version : String
}

input DeviceNotifInput {
  id: String
  available : Boolean
  cordova : String
  isVirtual : Boolean
  manufacturer : String
  model :String
  platform :String
  serial : String
  uuid : String
  version : String
}

type Sms {
  countrycode : String
  intlprefix : String
  phonenumber :String
}

input SmsInput {
  countrycode : String
  intlprefix : String
  phonenumber :String
}


type Notification {
  id: String
  app : String
  created_at : String
  sms: Sms
  device: DeviceNotif
  platform :String
  status : Int
  token : String
  uid : String
}


input NotificationInput {
  app : String
  created_at : String
  sms: SmsInput
  device: DeviceNotifInput
  platform :String
  status : Int
  token : String
  uid : String
}


input NotificationDeleteInput {
  platform: String!
  id: String!
}